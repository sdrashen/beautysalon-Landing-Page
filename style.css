/*RESET*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

a {
    text-decoration: none;
}


/*Tira as imgs do tamanho original e as adapta ao 100%*/

img {
    width: 100%;
    height: auto;
}


/* VARIABLES */

:root {
    /*font-size: 100% - Since 16px is by default the font-size, applying 100% to it means the same and 100% becomes a reference*/
    /* colors */
    --hue: 159;
    /* HSL color mode */
    --base-color: hsl(var(--hue) 36% 57%);
    --base-color-second: hsl(var(--hue) 65% 88%);
    --base-color-alt: hsl(var(--hue) 57% 53%);
    --title-color: hsl(var(--hue) 41% 10%);
    --text-color: hsl(0 0% 46%);
    --text-color-light: hsl(0 0% 98%);
    --body-color: hsl(0 0% 98%);
}


/* BASE */

body {
    font: 400 1rem 'DM Sans', sans-serif;
    color: var(--text-color);
    background: var(--body-color);
    /* webkit é um prefixo (vendor prefixer) que depende do navegador.
    Seo navegador é um tipo webkit (o chrome é)  então ele aplica a propriedade (font-smoothing: antialiased;) que está habilitada nele. Ela ñ está habilitada em todos mas no chrome está. */
    -webkit-font-smoothing: antialiased;
}

h1 {
    font: 700 1.875rem 'Poppins', sans-serif;
    color: var(--title-color);
    -webkit-font-smoothing: auto;
}

.button {}


/*rem = "root em" will always get a relative reference. In this case, it will always use as reference the font-size, that is 100%. So here we have 16 * 4.5 = 72px. 72px is the height of the header in the design on Figma*/


/* LAYOUT */

#header {
    border-bottom: 1px solid #e4e4e4;
    margin-bottom: 2rem;
}

nav {
    height: 4.5rem;
    /*72/16 = 4,5*/
    /* O height vai ficar aqui porque a altura que o nav tiver será a mesma do header. A vantagem de deixar aqui é que aqui já tem o display flex.  */
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font: 700 1.31rem 'Poppins', sans-serif;
    color: var(--title-color);
}

.logo span {
    color: var(--base-color);
}

.container {
    width: 100%;
    margin: 0 1.5rem;
}

.grid {
    display: grid;
    /*Esse display aqui não mud nada mas habilita outras funcionalidades como o gap. */
    gap: 2rem;
}

.section {
    padding: 5rem 0;
}


/* HOME */

#home .container {
    margin: 0;
}

#home .image {
    position: relative;
}


/* Esse psudo element cria um elemento fantasma antes da class image */

#home .image::before {
    content: '';
    height: 100%;
    width: 100%;
    background: red;
    position: absolute;
    /*Aqui tem que descolar 68px pra cima mas tem que ser transformado em porcentagem. É a alutra menos o deslocamento. Nesse caso, usa-se a regra de 3: 68 * 100 / 405 (dados tirados do layout no figma) */
    top: -16.8%;
    /* z-index é uma propriedade que está disponível por causa do uso do position (seja qual for). O eixo Z é de profundidade. Aplicando z-index: 1 aqui, quer dizer que a image tem z-index: 0 e ela fica atrás*/
    /*Esse cálculo é a largura menos o deslocamento para a direita*/
    left: 16.7%;
    z-index: 0;
    /*O top: 1-6.8% e o z-index: 0; leva o background para trás e um pouco para cima*/
}


/* "Dentro da home procura a class image e dentro dela a tag img" */

#home .image img {
    /* Esse position: relative; habilita novas funcionalidades pra usar aqui */
    position: relative;
    right: 2.93rem;
}

#home .text {
    margin: 0 1.5rem;
}